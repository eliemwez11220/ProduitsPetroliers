<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Abonne extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Abonne_model');
    } 

    /*
     * Listing of abonnes
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('abonne/index?');
        $config['total_rows'] = $this->Abonne_model->get_all_abonnes_count();
        $this->pagination->initialize($config);

        $data['abonnes'] = $this->Abonne_model->get_all_abonnes($params);
        
        $data['_view'] = 'abonne/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new abonne
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('raisonSociale','RaisonSociale','required');
		$this->form_validation->set_rules('nationalite','Nationalite','required');
		$this->form_validation->set_rules('nomResponsable','NomResponsable','required');
		$this->form_validation->set_rules('contact','Contact','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'raisonSociale' => $this->input->post('raisonSociale'),
				'nationalite' => $this->input->post('nationalite'),
				'nomResponsable' => $this->input->post('nomResponsable'),
				'contact' => $this->input->post('contact'),
				'adresse' => $this->input->post('adresse'),
            );
            
            $abonne_id = $this->Abonne_model->add_abonne($params);
            redirect('abonne/index');
        }
        else
        {            
            $data['_view'] = 'abonne/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a abonne
     */
    function edit($abo_id)
    {   
        // check if the abonne exists before trying to edit it
        $data['abonne'] = $this->Abonne_model->get_abonne($abo_id);
        
        if(isset($data['abonne']['abo_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('raisonSociale','RaisonSociale','required');
			$this->form_validation->set_rules('nationalite','Nationalite','required');
			$this->form_validation->set_rules('nomResponsable','NomResponsable','required');
			$this->form_validation->set_rules('contact','Contact','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'raisonSociale' => $this->input->post('raisonSociale'),
					'nationalite' => $this->input->post('nationalite'),
					'nomResponsable' => $this->input->post('nomResponsable'),
					'contact' => $this->input->post('contact'),
					'adresse' => $this->input->post('adresse'),
                );

                $this->Abonne_model->update_abonne($abo_id,$params);            
                redirect('abonne/index');
            }
            else
            {
                $data['_view'] = 'abonne/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The abonne you are trying to edit does not exist.');
    } 

    /*
     * Deleting abonne
     */
    function remove($abo_id)
    {
        $abonne = $this->Abonne_model->get_abonne($abo_id);

        // check if the abonne exists before trying to delete it
        if(isset($abonne['abo_id']))
        {
            $this->Abonne_model->delete_abonne($abo_id);
            redirect('abonne/index');
        }
        else
            show_error('The abonne you are trying to delete does not exist.');
    }
    
}
