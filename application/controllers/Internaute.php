<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Internaute extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Client_model'); 
        $this->load->model('Livre_model');
        $this->load->model('User_model');
         $this->load->model('Achat_model');
    } 


    function creerCompteClient()
    {   
       
        $this->load->library('form_validation');

       
        $this->form_validation->set_rules('asset_fullname','Asset Fullname','required');
        $this->form_validation->set_rules('asset_email','Asset Email','valid_email|required|is_unique[tb_im_users.asset_email]');
        $this->form_validation->set_rules('asset_phone','Asset Phone','is_unique[tb_im_users.asset_phone]');

        
        $this->form_validation->set_rules('asset_password','Asset Password','required');
        $this->form_validation->set_rules('password_confirm','password_confirm','matches[asset_password]');
        //check for client

        $this->form_validation->set_rules('ville_client','ville_client','required');
        $this->form_validation->set_rules('code_postal','code_postal','required');


        if($this->form_validation->run())     
        {   
           $email = $this->input->post('asset_email');
           $username = strstr($email, '@', true);
           $options = array('cost' => 12);
            $asset_password = password_hash($this->input->post('asset_password'), PASSWORD_BCRYPT, $options);

            $current_datetime=date('Y-m-d H:i:s');
            
            //create user account for customer
            $params_user = array(
                'asset_password' =>  $asset_password,
                'asset_fullname' => $this->input->post('asset_fullname'),
                'asset_username' => $this->input->post('asset_username'),
                'asset_email' => $email,
                'asset_sexe' => $this->input->post('asset_sexe'),
                'asset_phone' => $this->input->post('asset_phone'),
                'asset_type' => 'utilisateur',
                'date_ajout' =>  $current_datetime,
                'date_connected' =>  $current_datetime,
                'account_activated' => "active",
                'asset_fonction' => 'client',
                'asset_matricule' => $this->matriculeClient(),
            );


            //save client data in table
            $params_client = array(
                'nom_client' => $this->input->post('asset_fullname'),
                'phone_client' => $this->input->post('asset_phone'),
                'email_client' => $email,
                'ville_client' => $this->input->post('ville_client'),
                'code_postal' => $this->input->post('code_postal'),
                'date_ajout' => $current_datetime,
            );
            
            $client_id = $this->Client_model->add_client($params_client);
            $tb_am_user_id = $this->User_model->add_tb_am_user($params_user);
            redirect('internaute/success');
        }
        else
        {            
            $data['_view'] = 'internaute/creerCompteClient';
            $this->load->view('layouts/main',$data);
        }
    }  

    public function matriculeClient(){
        
        $al = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $code_client = substr(str_shuffle(str_repeat($al, rand(5, 20))), 0, 5);

        return ($this->form_validation->run()) ? $code_client : $this->matriculeClient();
    }

    public function success(){
        $data['_view'] = 'internaute/successAccount';
            $this->load->view('layouts/main',$data);
    }

    function addCart($achat_id)
    {   
        // check if the achat exists before trying to edit it
        $data['livre'] = $this->Livre_model->get_livre($achat_id);

       

        if(isset($data['livre']['liv_id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('client_sid','Client Sid','required');
            $this->form_validation->set_rules('livre_sid','Livre Sid','required');
            $this->form_validation->set_rules('qte_livre','Qte Livre','required');
        
            if($this->form_validation->run())     
            {   

                $qte_livre = $this->input->post('qte_livre');
                $prix_livre = $this->input->post('prix_livre');
                $prix_total=$qte_livre*$prix_livre;
                $params = array(
                    'client_sid' => $this->input->post('client_sid'),
                    'livre_sid' => $this->input->post('livre_sid'),
                    'date_achat' => date('Y-m-d H:i:s'),
                    'qte_livre' => $qte_livre,
                    'prix_livre' => $prix_livre,
                    'prix_total' => $prix_total,
                    'devise_prix' => $this->input->post('devise_prix'),
                );
 //var_dump($params);
        //exit();
                $this->Achat_model->add_achat($params);            
                redirect('internaute/mesAchatsLivres');
            }
            else
            {
               
                $data['all_clients'] = $this->Client_model->get_all_clients();

                
                $data['all_livres'] = $this->Livre_model->get_all_livres();

                $data['_view'] = 'internaute/addCart';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The achat you are trying to edit does not exist.');
    }  

    function mesAchatsLivres()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('intrnaute/mesAchatsLivres?');
        $config['total_rows'] = $this->Achat_model->get_all_achats_count();
        $this->pagination->initialize($config);

        $data['achats'] = $this->Achat_model->get_all_achats($params);
        
        $data['_view'] = 'internaute/achats';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Listing of clients
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('client/index?');
        $config['total_rows'] = $this->Client_model->get_all_clients_count();
        $this->pagination->initialize($config);

        $data['clients'] = $this->Client_model->get_all_clients($params);
        
        $data['_view'] = 'client/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new client
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('nom_client','Nom Client','required');
		$this->form_validation->set_rules('phone_client','Phone Client','required|is_unique[phone_client]');
		$this->form_validation->set_rules('email_client','Email Client','required|is_unique[email_client]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'nom_client' => $this->input->post('nom_client'),
				'phone_client' => $this->input->post('phone_client'),
				'email_client' => $this->input->post('email_client'),
				'ville_client' => $this->input->post('ville_client'),
				'code_postal' => $this->input->post('code_postal'),
				'date_ajout' => $this->input->post('date_ajout'),
            );
            
            $client_id = $this->Client_model->add_client($params);
            redirect('client/index');
        }
        else
        {            
            $data['_view'] = 'client/add';
            $this->load->view('layouts/main',$data);
        }
    }  



    /*
     * Editing a client
     */
    function edit($cli_id)
    {   
        // check if the client exists before trying to edit it
        $data['client'] = $this->Client_model->get_client($cli_id);
        
        if(isset($data['client']['cli_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('nom_client','Nom Client','required');
			$this->form_validation->set_rules('phone_client','Phone Client','required|is_unique[phone_client]');
			$this->form_validation->set_rules('email_client','Email Client','required|is_unique[email_client]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'nom_client' => $this->input->post('nom_client'),
					'phone_client' => $this->input->post('phone_client'),
					'email_client' => $this->input->post('email_client'),
					'ville_client' => $this->input->post('ville_client'),
					'code_postal' => $this->input->post('code_postal'),
					'date_ajout' => $this->input->post('date_ajout'),
                );

                $this->Client_model->update_client($cli_id,$params);            
                redirect('client/index');
            }
            else
            {
                $data['_view'] = 'client/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The client you are trying to edit does not exist.');
    } 

    /*
     * Deleting client
     */
    function remove($cli_id)
    {
        $client = $this->Client_model->get_client($cli_id);

        // check if the client exists before trying to delete it
        if(isset($client['cli_id']))
        {
            $this->Client_model->delete_client($cli_id);
            redirect('client/index');
        }
        else
            show_error('The client you are trying to delete does not exist.');
    }
    
}
